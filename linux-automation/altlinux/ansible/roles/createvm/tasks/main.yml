- debug:
    var: createvm

- name: Full clone
  community.general.proxmox_kvm:
    full: true
    state: present
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ createvm.node }}"
    name: "{{ createvm.name }}"
    clone: "{{ createvm.template }}"
    storage: "{{ createvm.storage }}"
    format: "{{ createvm.format }}"
    agent: enabled=1
  when: createvm.clontype == "full"
  register: result_newvm

- name: Linked clone 
  community.general.proxmox_kvm:
    full: false
    state: present
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ createvm.node }}"
    name: "{{ createvm.name }}"
    clone: "{{ createvm.template }}"
    agent: enabled=1
  when: createvm.clontype == "linked"
  register: result_newvm

- debug:
    var: result_newvm

# - name: Enable guest agent
#   community.general.proxmox_kvm:
#     update: true
#     api_user: "{{ proxmox.api_user }}"
#     api_password: "{{ proxmox.api_password }}"
#     api_token_id: "{{ proxmox.api_token_id }}"
#     api_token_secret: "{{ proxmox.api_token_secret }}"
#     api_host: "{{ proxmox.api_host }}"
#     # name: "{{ createvm.name }}"
#     vmid: "{{ result_newvm.vmid }}"
#     node: "{{ createvm.node }}"

- name: Set cores
  community.general.proxmox_kvm:
    update: true
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ createvm.node }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    cores: "{{ createvm.cores }}"
  when: createvm.cores is defined

- name: Set memory
  community.general.proxmox_kvm:
    update: true
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ createvm.node }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    memory: "{{ createvm.memory }}"
  when: createvm.memory is defined

- name: Set balloon
  community.general.proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ createvm.node }}"
    update: true
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    balloon: "{{ createvm.balloon }}"
  when: createvm.balloon is defined

- name: Set disk size
  community.general.proxmox_disk:
    state: resized
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    size: "{{ createvm.disk.size }}"
    disk: "{{ createvm.disk.name | default('virtio0') }}"
  when: 
    - createvm.disk.size is defined
    - createvm.disk.size != omit

- debug:
    var: createvm.nic

- name: Set nic name mac
  community.general.proxmox_nic:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    interface: "{{ createvm.nic.name | default('net0') }}"
    mac: "{{ createvm.nic.mac }}"
  when: 
    - createvm.nic.mac is defined
    - createvm.nic.mac != omit

- name: Set nic name bridge model mtu mac
  community.general.proxmox_nic:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    interface: "{{ createvm.nic.name | default('net0') }}"
    bridge: "{{ createvm.nic.bridge | default('vmbr0') }}"
    model: "{{ createvm.nic.model | default('virtio') }}"
    mtu: "{{ createvm.nic.mtu | default('1') }}"
    mac: "{{ createvm.nic.mac }}"
  when: 
    - createvm.nic.mac is defined
    - createvm.nic.mac != omit

- name: Set nic name bridge model mtu
  community.general.proxmox_nic:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    interface: "{{ createvm.nic.name | default('net0') }}"
    bridge: "{{ createvm.nic.bridge | default('vmbr0') }}"
    model: "{{ createvm.nic.model | default('virtio') }}"
    mtu: "{{ createvm.nic.mtu | default('1') }}"
  when: 
    - createvm.nic.mac is undefined or createvm.nic.mac == omit

- name: Set CI type
  community.general.proxmox_kvm:
    update: true
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    node: "{{ createvm.node }}"
    citype: "{{ createvm.citype }}"

- name: Set CI user settings
  community.general.proxmox_kvm:
    update: true
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    node: "{{ createvm.node }}"
    ciuser: "{{ createvm.ciuser.name }}"
    cipassword: "{{ createvm.ciuser.password }}"
    sshkeys: "{{ createvm.ciuser.sshkeys }}"
  when: 
    - createvm.ciuser is defined

- name: Set CI ipconfig
  community.general.proxmox_kvm:
    update: true
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    node: "{{ createvm.node }}"
    ipconfig: 
      ipconfig0: '{{ createvm.ipconfig0 }}'
  when: 
    - createvm.ipconfig0 is defined
    - createvm.ipconfig0 != omit

- name: Set CI nameservers
  community.general.proxmox_kvm:
    update: true
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    node: "{{ createvm.node }}"
    nameservers: "{{ createvm.nameservers }}"
  when: 
    - createvm.nameservers is defined
    - createvm.nameservers != omit

- name: Set CI searchdomains
  community.general.proxmox_kvm:
    update: true
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    node: "{{ createvm.node }}"
    searchdomains: "{{ createvm.searchdomains }}"
  when: 
    - createvm.searchdomains is defined
    - createvm.searchdomains != omit

- name: Set tags
  community.general.proxmox_kvm:
    update: true
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ createvm.node }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
    tags: "{{ createvm.tags }}"

- name: Start VMs
  community.general.proxmox_kvm:
    state: "{{ createvm.state | default('started') }}"
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ createvm.node }}"
    # name: "{{ createvm.name }}"
    vmid: "{{ result_newvm.vmid }}"
  # when: createvm.start is defined
  ignore_errors: true

- debug:
    msg: "Created: {{ createvm.name }}"
