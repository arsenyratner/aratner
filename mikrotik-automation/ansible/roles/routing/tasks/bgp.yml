---
# tasks file for routing
#
#
- name: Configure BGP - Instance details
  routeros_command:
    commands:
      - /routing bgp instance set 0 as="{{ bgp.local_as }}" router-id="{{ router_id }}"
  tags:
    - bgp

- name: Retrieve current BGP peers 
  routeros_command:
    commands:
      - /routing bgp peer print
  register: bgp_peer_result
  no_log: True
  tags:
  - bgp
  - bgp_v4
  - bgp_v6

- name: Clean the command output - BGP Peers
  set_fact:
    bgp_peer_result_output: "{{ bgp_peer_result_output|default([]) + [ item ] }}"
    no_log: True
  loop: "{{ bgp_peer_result.stdout_lines }}"
  tags:
  - bgp
  - bgp_v4
  - bgp_v6

- name: Check if the peer exists - IPv4
  set_fact:
    peer_exists: "{{ peer_exists|default([]) + [ item.peer ] }}"
  when: bgp_peer_result_output is search(item.peer)
  loop: "{{ bgp.neighbors.ipv4 }}"
  tags:
  - bgp
  - bgp_v4

- name: Check if the peer exists - IPv6
  set_fact:
    peer_exists: "{{ peer_exists|default([]) + [ item.peer ] }}"
  when: bgp_peer_result_output is search(item.peer)
  loop: "{{ bgp.neighbors.ipv6 }}"
  tags:
  - bgp
  - bgp_v6

- name: Configure BGP - Add eBGP v4 peers if they are not configured
  routeros_command:
    commands:
      - /routing bgp peer add remote-as="{{ item.remote_as }}" remote-address="{{ item.peer }}" name="{{ item.name }}"
  when:
    - bgp is defined
    - bgp.neighbors is defined
    - bgp.neighbors.ipv4 is defined
    - item.ebgp is defined
    - peer_exists is not defined or peer_exists is not search(item.peer) 
  loop: "{{ bgp.neighbors.ipv4 }}"
  tags:
  - bgp
  - bgp_v4

- name: Configure BGP - Update eBGP v4 peers if they are configured
  routeros_command:
    commands:
      - /routing bgp peer set [find where remote-address="{{ item.peer }}"] remote-as="{{ item.remote_as }}" name="{{ item.name }}"
  when:
    - bgp is defined
    - bgp.neighbors is defined
    - bgp.neighbors.ipv4 is defined
    - item.ebgp is defined
    - peer_exists is defined
    - peer_exists is search(item.peer) 
  loop: "{{ bgp.neighbors.ipv4 }}"
  tags:
  - bgp
  - bgp_v4

- name: Configure BGP - Add eBGP v6 peers if they are not configured
  routeros_command:
    commands:
      - /routing bgp peer add remote-as="{{ item.remote_as }}" remote-address="{{ item.peer }}" address-families="ipv6" name="{{ item.name }}"
  when:
    - bgp is defined
    - bgp.neighbors is defined
    - bgp.neighbors.ipv6 is defined
    - item.ebgp is defined
    - peer_exists is not defined or peer_exists is not search(item.peer) 
  loop: "{{ bgp.neighbors.ipv6 }}"
  tags:
  - bgp
  - bgp_v6

- name: Configure BGP - Update eBGP v6 peers if they are configured
  routeros_command:
    commands:
      - /routing bgp peer set [find where remote-address="{{ item.peer }}"] remote-as="{{ item.remote_as }}" address-families="ipv6" name="{{ item.name }}"
  when:
    - bgp is defined
    - bgp.neighbors is defined
    - bgp.neighbors.ipv6 is defined
    - item.ebgp is defined
    - peer_exists is defined
    - peer_exists is search(item.peer) 
  loop: "{{ bgp.neighbors.ipv6 }}"
  tags:
  - bgp
  - bgp_v6

- name: Configure BGP - Add iBGP v4 peers if they are not configured
  routeros_command:
    commands:
      - /routing bgp peer add remote-as="{{ item.remote_as }}" remote-address="{{ item.peer }}" update-source="{{ item.update_source }}" name="{{ item.name }}"
  when:
    - bgp is defined
    - bgp.neighbors is defined
    - bgp.neighbors.ipv4 is defined
    - item.ibgp is defined
    - peer_exists is not defined or peer_exists is not search(item.peer) 
  loop: "{{ bgp.neighbors.ipv4 }}"
  tags:
  - bgp
  - bgp_v4

- name: Configure BGP - Update iBGP v4 peers if they are configured
  routeros_command:
    commands:
      - /routing bgp peer set [find where remote-address="{{ item.peer }}"] remote-as="{{ item.remote_as }}" update-source="{{ item.update_source }}" name="{{ item.name }}"
  when:
    - bgp is defined
    - bgp.neighbors is defined
    - bgp.neighbors.ipv4 is defined
    - item.ibgp is defined
    - peer_exists is defined
    - peer_exists is search(item.peer) 
  loop: "{{ bgp.neighbors.ipv4 }}"
  tags:
  - bgp
  - bgp_v4

- name: Configure BGP - Add iBGP v6 peers if they are not configured
  routeros_command:
    commands:
      - /routing bgp peer add remote-as="{{ item.remote_as }}" remote-address="{{ item.peer }}" update-source="{{ item.update_source }}" address-families="ipv6" name="{{ item.name }}"
  when:
    - bgp is defined
    - bgp.neighbors is defined
    - bgp.neighbors.ipv6 is defined
    - item.ibgp is defined
    - peer_exists is not defined or peer_exists is not search(item.peer) 
  loop: "{{ bgp.neighbors.ipv6 }}"
  tags:
  - bgp
  - bgp_v6

- name: Configure BGP - Update iBGP v6 peers if they are configured
  routeros_command:
    commands:
      - /routing bgp peer set [find where remote-address="{{ item.peer }}"] remote-as="{{ item.remote_as }}" update-source="{{ item.update_source }}" address-families="ipv6" name="{{ item.name }}"
  when:
    - bgp is defined
    - bgp.neighbors is defined
    - bgp.neighbors.ipv6 is defined
    - item.ibgp is defined
    - peer_exists is defined 
    - peer_exists is search(item.peer) 
  loop: "{{ bgp.neighbors.ipv6 }}"
  tags:
  - bgp
  - bgp_v6

- name: Configure BGP - iBGP v4 Default Originate
  routeros_command:
    commands:
      - /routing bgp peer set [find where remote-address="{{ item.peer }}"] default-originate=if-installed
  when:
    - bgp is defined
    - bgp.neighbors is defined
    - bgp.neighbors.ipv4 is defined
    - item.ibgp is defined
    - item.default_originate is defined
  loop: "{{ bgp.neighbors.ipv4 }}"
  tags:
  - bgp
  - bgp_v4

- name: Configure BGP - Redistribute OSPF, connected and static
  routeros_command: 
    commands:
      - /routing bgp instance set 0 redistribute-ospf=yes redistribute-connected=yes redistribute-static=yes
  when:
    - bgp is defined
    - bgp.redist is defined
    - bgp.redist.ospf is defined
  tags:
  - bgp
  - bgp_v4
  - bgp_v6

### Remove undefined peers

- name: Retrieve IPs of configured peers - IPv4
  set_fact:
    v4_configured_peers: "{{ v4_configured_peers|default([]) + [ item | regex_findall('\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b') ] }}"
  loop: "{{ bgp_peer_result.stdout_lines[0] | reject('search', 'Flags') | reject('search', 'INSTANCE') | list }}"
  tags:
  - bgp
  - bgp_v4

- name: Retrieve IPs of configured peers - IPv6
  set_fact:
    v6_configured_peers: "{{ v6_configured_peers|default([]) + [ item | regex_findall('[0-9a-fA-F]{1,4}:.*:[0-9a-fA-F]{1,4}') ]  }}"
  loop: "{{ bgp_peer_result.stdout_lines[0] | reject('search', 'Flags') | reject('search', 'INSTANCE') | list }}"
  tags:
  - bgp
  - bgp_v6

- name: Combine the configured peer lists
  set_fact:
    configured_peers: '{{ v4_configured_peers|flatten|default([]) + v6_configured_peers|flatten|default([])}}'
  tags:
  - bgp
  - bgp_v4
  - bgp_v6


- name: Create list of defined peers
  set_fact:
    defined_peers: "{{ defined_peers|default([]) + [ item.peer ] }}"
  loop: "{{ bgp.neighbors.ipv4 + bgp.neighbors.ipv6 }}"
  tags:
  - bgp
  - bgp_v4
  - bgp_v6

- name: Create list of peers to delete
  set_fact:
    delete_peers: "{{ delete_peers|default([]) + [ item ] }}"
  when: 
    - defined_peers is not search(item)
  loop: "{{ configured_peers }}"
  tags:
  - bgp
  - bgp_v4
  - bgp_v6

- name: Delete the peers
  routeros_command:
    commands:
      - /routing bgp peer remove [find where remote-address="{{ item }}"]
  when: delete_peers is defined
  loop: "{{ delete_peers }}"
  tags:
  - bgp
  - bgp_v4
  - bgp_v6

